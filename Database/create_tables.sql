-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS ps_default.addiction
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT addiction_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ps_default.amount_log
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    tracker_id integer NOT NULL,
    amount integer NOT NULL,
    datetime timestamp with time zone NOT NULL,
    CONSTRAINT amount_log_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ps_default.answer
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    title character varying(100) COLLATE pg_catalog."default" NOT NULL,
    answer_text character varying(255) COLLATE pg_catalog."default" NOT NULL,
    user_id integer NOT NULL,
    question_id integer NOT NULL,
    CONSTRAINT answer_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ps_default.character_traits
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT character_traits_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ps_default.custom_field
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    declaration character varying(100) COLLATE pg_catalog."default" NOT NULL,
    input_type character varying(10) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT custom_field_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ps_default.emotion_log
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    tracker_id integer NOT NULL,
    emotion_id integer NOT NULL,
    datetime timestamp with time zone NOT NULL,
    CONSTRAINT emotion_log_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ps_default.emotion
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    color character varying(6) COLLATE pg_catalog."default" NOT NULL,
    description character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT emotions_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ps_default.figure
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    picture bytea NOT NULL,
    CONSTRAINT figure_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ps_default.game
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT game_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ps_default.game_has_figure
(
    game_id integer NOT NULL,
    figure_id integer NOT NULL,
    CONSTRAINT game_has_figure_pkey PRIMARY KEY (game_id, figure_id)
);

CREATE TABLE IF NOT EXISTS ps_default.game_state
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    user_id integer NOT NULL,
    file_state bytea NOT NULL,
    game_id integer NOT NULL,
    CONSTRAINT game_state_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ps_default.meme
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    meme_file bytea NOT NULL,
    CONSTRAINT meme_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ps_default.person
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    firstname character varying(100) COLLATE pg_catalog."default" NOT NULL DEFAULT 'to be named'::character varying,
    middlenames character varying(255)[] COLLATE pg_catalog."default",
    lastname character varying(100) COLLATE pg_catalog."default",
    fronting boolean NOT NULL DEFAULT false,
    pronouns character varying(20) COLLATE pg_catalog."default",
    birthday date,
    age integer,
    likes character varying(100)[] COLLATE pg_catalog."default",
    dislikes character varying(100)[] COLLATE pg_catalog."default",
    role_id integer,
    type_id integer,
    user_id integer,
    CONSTRAINT person_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ps_default.person_has_character_traits
(
    character_trait_id integer NOT NULL,
    person_id integer NOT NULL,
    CONSTRAINT person_has_character_traits_pkey PRIMARY KEY (character_trait_id, person_id)
);

CREATE TABLE IF NOT EXISTS ps_default.person_has_custom_field
(
    custom_field_id integer NOT NULL,
    person_id integer NOT NULL,
    text_input character varying(255) COLLATE pg_catalog."default" NOT NULL,
    time_input time without time zone,
    date_input date,
    datetime_input timestamp without time zone,
    list_input character varying(50)[] COLLATE pg_catalog."default",
    number_input integer,
    CONSTRAINT person_has_custom_field_pkey PRIMARY KEY (custom_field_id, person_id)
);

CREATE TABLE IF NOT EXISTS ps_default.person_type
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT person_type_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ps_default.question
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    title character varying(100) COLLATE pg_catalog."default" NOT NULL,
    question_text character varying(255) COLLATE pg_catalog."default" NOT NULL,
    user_id integer NOT NULL,
    CONSTRAINT question_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ps_default.role
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT role_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ps_default.routine
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    type_id integer NOT NULL,
    user_id integer NOT NULL,
    part_id integer NOT NULL,
    reminder boolean,
    reminder_time time with time zone,
    CONSTRAINT routine_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ps_default.routine_part
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT routine_part_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ps_default.routine_type
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT routine_type_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ps_default.skill
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT skill_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ps_default.sober_tracker
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    sober_log boolean NOT NULL,
    tracker_id integer NOT NULL,
    datetime timestamp with time zone,
    CONSTRAINT sober_tracker_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ps_default.time_log
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    tracker_id integer NOT NULL,
    start time with time zone NOT NULL,
    "end" time with time zone,
    result time without time zone NOT NULL,
    date date NOT NULL,
    CONSTRAINT time_log_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ps_default.todo
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    title character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description character varying(255) COLLATE pg_catalog."default",
    reminder boolean NOT NULL,
    remindertime timestamp with time zone,
    list_id integer NOT NULL,
    done boolean NOT NULL DEFAULT false,
    CONSTRAINT todo_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ps_default.todolist
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description character varying(255) COLLATE pg_catalog."default",
    user_id integer NOT NULL,
    CONSTRAINT todolist_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ps_default.tracker
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    user_id integer NOT NULL,
    addiction_id integer,
    CONSTRAINT tracker_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ps_default."user"
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    username character varying(100) COLLATE pg_catalog."default" NOT NULL,
    password character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT user_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ps_default.user_has_meme
(
    user_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    meme_id integer NOT NULL,
    CONSTRAINT user_has_meme_pkey PRIMARY KEY (user_id, meme_id)
);

CREATE TABLE IF NOT EXISTS ps_default.user_has_skill
(
    user_id integer NOT NULL,
    skill_id integer NOT NULL,
    CONSTRAINT user_has_skill_pkey PRIMARY KEY (user_id, skill_id)
);

ALTER TABLE IF EXISTS ps_default.amount_log
    ADD CONSTRAINT tracker_fk FOREIGN KEY (tracker_id)
    REFERENCES ps_default.tracker (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS ps_default.answer
    ADD CONSTRAINT question_fk FOREIGN KEY (question_id)
    REFERENCES ps_default.question (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS ps_default.answer
    ADD CONSTRAINT user_fk FOREIGN KEY (user_id)
    REFERENCES ps_default."user" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS ps_default.emotion_log
    ADD CONSTRAINT tracker_fk FOREIGN KEY (tracker_id)
    REFERENCES ps_default.tracker (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS ps_default.emotion_log
    ADD CONSTRAINT emotions_fk FOREIGN KEY (emotion_id)
    REFERENCES ps_default.emotion (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS ps_default.game_has_figure
    ADD CONSTRAINT figure_fk FOREIGN KEY (figure_id)
    REFERENCES ps_default.figure (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS ps_default.game_has_figure
    ADD CONSTRAINT game_fk FOREIGN KEY (game_id)
    REFERENCES ps_default.game (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS ps_default.game_state
    ADD CONSTRAINT game_fk FOREIGN KEY (game_id)
    REFERENCES ps_default.game (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS ps_default.game_state
    ADD CONSTRAINT user_fk FOREIGN KEY (user_id)
    REFERENCES ps_default."user" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS ps_default.person
    ADD CONSTRAINT role_fk FOREIGN KEY (role_id)
    REFERENCES ps_default.role (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS ps_default.person
    ADD CONSTRAINT type_fk FOREIGN KEY (type_id)
    REFERENCES ps_default.person_type (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS ps_default.person
    ADD CONSTRAINT user_fk FOREIGN KEY (user_id)
    REFERENCES ps_default."user" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS ps_default.person_has_character_traits
    ADD CONSTRAINT character_traits FOREIGN KEY (character_trait_id)
    REFERENCES ps_default.character_traits (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS ps_default.person_has_character_traits
    ADD CONSTRAINT person_fk FOREIGN KEY (person_id)
    REFERENCES ps_default.person (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS ps_default.person_has_custom_field
    ADD CONSTRAINT custom_field_fk FOREIGN KEY (custom_field_id)
    REFERENCES ps_default.custom_field (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS ps_default.person_has_custom_field
    ADD CONSTRAINT person_fk FOREIGN KEY (person_id)
    REFERENCES ps_default.person (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS ps_default.question
    ADD CONSTRAINT user_fk FOREIGN KEY (user_id)
    REFERENCES ps_default."user" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS ps_default.routine
    ADD CONSTRAINT ressource_part_fk FOREIGN KEY (part_id)
    REFERENCES ps_default.routine_part (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS ps_default.routine
    ADD CONSTRAINT ressource_type_fk FOREIGN KEY (type_id)
    REFERENCES ps_default.routine_type (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS ps_default.routine
    ADD CONSTRAINT user_fk FOREIGN KEY (user_id)
    REFERENCES ps_default."user" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS ps_default.sober_tracker
    ADD CONSTRAINT tracker_fk FOREIGN KEY (tracker_id)
    REFERENCES ps_default.tracker (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS ps_default.time_log
    ADD CONSTRAINT tracker_fk FOREIGN KEY (tracker_id)
    REFERENCES ps_default.tracker (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS ps_default.todo
    ADD CONSTRAINT list_fk FOREIGN KEY (list_id)
    REFERENCES ps_default.todolist (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS ps_default.todolist
    ADD CONSTRAINT user_fk FOREIGN KEY (user_id)
    REFERENCES ps_default."user" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS ps_default.tracker
    ADD CONSTRAINT user_fk FOREIGN KEY (user_id)
    REFERENCES ps_default."user" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS ps_default.tracker
    ADD CONSTRAINT addicrion_fk FOREIGN KEY (addiction_id)
    REFERENCES ps_default.addiction (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS ps_default.user_has_meme
    ADD CONSTRAINT meme_fk FOREIGN KEY (meme_id)
    REFERENCES ps_default.meme (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS ps_default.user_has_meme
    ADD CONSTRAINT user_fk FOREIGN KEY (user_id)
    REFERENCES ps_default."user" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS ps_default.user_has_skill
    ADD CONSTRAINT user_fk FOREIGN KEY (user_id)
    REFERENCES ps_default."user" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS ps_default.user_has_skill
    ADD CONSTRAINT skill_fk FOREIGN KEY (skill_id)
    REFERENCES ps_default.skill (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;